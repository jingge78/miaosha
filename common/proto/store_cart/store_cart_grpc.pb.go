// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: store_cart.proto

package store_cart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StoreCart_AddStoreCart_FullMethodName = "/store_cart.StoreCart/AddStoreCart"
)

// StoreCartClient is the client API for StoreCart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreCartClient interface {
	AddStoreCart(ctx context.Context, in *AddStoreCartRequest, opts ...grpc.CallOption) (*AddStoreCartResponse, error)
}

type storeCartClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreCartClient(cc grpc.ClientConnInterface) StoreCartClient {
	return &storeCartClient{cc}
}

func (c *storeCartClient) AddStoreCart(ctx context.Context, in *AddStoreCartRequest, opts ...grpc.CallOption) (*AddStoreCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStoreCartResponse)
	err := c.cc.Invoke(ctx, StoreCart_AddStoreCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreCartServer is the server API for StoreCart service.
// All implementations must embed UnimplementedStoreCartServer
// for forward compatibility
type StoreCartServer interface {
	AddStoreCart(context.Context, *AddStoreCartRequest) (*AddStoreCartResponse, error)
	mustEmbedUnimplementedStoreCartServer()
}

// UnimplementedStoreCartServer must be embedded to have forward compatible implementations.
type UnimplementedStoreCartServer struct {
}

func (UnimplementedStoreCartServer) AddStoreCart(context.Context, *AddStoreCartRequest) (*AddStoreCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStoreCart not implemented")
}
func (UnimplementedStoreCartServer) mustEmbedUnimplementedStoreCartServer() {}

// UnsafeStoreCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreCartServer will
// result in compilation errors.
type UnsafeStoreCartServer interface {
	mustEmbedUnimplementedStoreCartServer()
}

func RegisterStoreCartServer(s grpc.ServiceRegistrar, srv StoreCartServer) {
	s.RegisterService(&StoreCart_ServiceDesc, srv)
}

func _StoreCart_AddStoreCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStoreCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreCartServer).AddStoreCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreCart_AddStoreCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreCartServer).AddStoreCart(ctx, req.(*AddStoreCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreCart_ServiceDesc is the grpc.ServiceDesc for StoreCart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreCart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store_cart.StoreCart",
	HandlerType: (*StoreCartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStoreCart",
			Handler:    _StoreCart_AddStoreCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store_cart.proto",
}
