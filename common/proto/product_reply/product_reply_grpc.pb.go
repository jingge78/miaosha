// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: product_reply.proto

package product_reply

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ProductReply_ProductReplyList_FullMethodName = "/product_reply.ProductReply/ProductReplyList"
)

// ProductReplyClient is the client API for ProductReply service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductReplyClient interface {
	ProductReplyList(ctx context.Context, in *ProductReplyListRequest, opts ...grpc.CallOption) (*ProductReplyListResponse, error)
}

type productReplyClient struct {
	cc grpc.ClientConnInterface
}

func NewProductReplyClient(cc grpc.ClientConnInterface) ProductReplyClient {
	return &productReplyClient{cc}
}

func (c *productReplyClient) ProductReplyList(ctx context.Context, in *ProductReplyListRequest, opts ...grpc.CallOption) (*ProductReplyListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductReplyListResponse)
	err := c.cc.Invoke(ctx, ProductReply_ProductReplyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductReplyServer is the server API for ProductReply service.
// All implementations must embed UnimplementedProductReplyServer
// for forward compatibility
type ProductReplyServer interface {
	ProductReplyList(context.Context, *ProductReplyListRequest) (*ProductReplyListResponse, error)
	mustEmbedUnimplementedProductReplyServer()
}

// UnimplementedProductReplyServer must be embedded to have forward compatible implementations.
type UnimplementedProductReplyServer struct {
}

func (UnimplementedProductReplyServer) ProductReplyList(context.Context, *ProductReplyListRequest) (*ProductReplyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductReplyList not implemented")
}
func (UnimplementedProductReplyServer) mustEmbedUnimplementedProductReplyServer() {}

// UnsafeProductReplyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductReplyServer will
// result in compilation errors.
type UnsafeProductReplyServer interface {
	mustEmbedUnimplementedProductReplyServer()
}

func RegisterProductReplyServer(s grpc.ServiceRegistrar, srv ProductReplyServer) {
	s.RegisterService(&ProductReply_ServiceDesc, srv)
}

func _ProductReply_ProductReplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductReplyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReplyServer).ProductReplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductReply_ProductReplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReplyServer).ProductReplyList(ctx, req.(*ProductReplyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductReply_ServiceDesc is the grpc.ServiceDesc for ProductReply service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductReply_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_reply.ProductReply",
	HandlerType: (*ProductReplyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductReplyList",
			Handler:    _ProductReply_ProductReplyList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_reply.proto",
}
