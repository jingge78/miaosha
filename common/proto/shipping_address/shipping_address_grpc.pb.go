// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: shipping_address.proto

package shipping_address

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ShippingAddress_AddShippingAddress_FullMethodName = "/shipping_address.ShippingAddress/AddShippingAddress"
)

// ShippingAddressClient is the client API for ShippingAddress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingAddressClient interface {
	AddShippingAddress(ctx context.Context, in *AddShippingAddressRequest, opts ...grpc.CallOption) (*AddShippingAddressResponse, error)
}

type shippingAddressClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingAddressClient(cc grpc.ClientConnInterface) ShippingAddressClient {
	return &shippingAddressClient{cc}
}

func (c *shippingAddressClient) AddShippingAddress(ctx context.Context, in *AddShippingAddressRequest, opts ...grpc.CallOption) (*AddShippingAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddShippingAddressResponse)
	err := c.cc.Invoke(ctx, ShippingAddress_AddShippingAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingAddressServer is the server API for ShippingAddress service.
// All implementations must embed UnimplementedShippingAddressServer
// for forward compatibility
type ShippingAddressServer interface {
	AddShippingAddress(context.Context, *AddShippingAddressRequest) (*AddShippingAddressResponse, error)
	mustEmbedUnimplementedShippingAddressServer()
}

// UnimplementedShippingAddressServer must be embedded to have forward compatible implementations.
type UnimplementedShippingAddressServer struct {
}

func (UnimplementedShippingAddressServer) AddShippingAddress(context.Context, *AddShippingAddressRequest) (*AddShippingAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShippingAddress not implemented")
}
func (UnimplementedShippingAddressServer) mustEmbedUnimplementedShippingAddressServer() {}

// UnsafeShippingAddressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingAddressServer will
// result in compilation errors.
type UnsafeShippingAddressServer interface {
	mustEmbedUnimplementedShippingAddressServer()
}

func RegisterShippingAddressServer(s grpc.ServiceRegistrar, srv ShippingAddressServer) {
	s.RegisterService(&ShippingAddress_ServiceDesc, srv)
}

func _ShippingAddress_AddShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShippingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingAddressServer).AddShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingAddress_AddShippingAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingAddressServer).AddShippingAddress(ctx, req.(*AddShippingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingAddress_ServiceDesc is the grpc.ServiceDesc for ShippingAddress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingAddress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shipping_address.ShippingAddress",
	HandlerType: (*ShippingAddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddShippingAddress",
			Handler:    _ShippingAddress_AddShippingAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shipping_address.proto",
}
